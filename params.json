{"name":"Cellular gps tracker","tagline":"An arduino based gps tracker that transmits data over a GSM shield","body":"#Introduction\r\n\r\nThis arduino GPRS/GPS tracking system was originally inspired by the blog post at Tronix Stuff \r\n(http://tronixstuff.wordpress.com/2011/01/19/tutorial-arduino-and-gsm-cellular-part-one/).  The\r\ntracker will obtain its geo-coordinates and upload them to a server running the provided python\r\nscript and store them in a MySQL table.\r\n\r\nIn order for this code to work you will need the following parts\r\n\r\n* Arduino UNO - http://www.sparkfun.com/products/11021\r\n* GPS Shield - http://www.sparkfun.com/products/10710\r\n* EM-406A GPS unit - http://www.sparkfun.com/products/465\r\n* SM5100B GSM Shield - http://www.sparkfun.com/products/9607\r\n* Quad Band Cellular Antenna - http://www.sparkfun.com/products/8347\r\n* 1 green LED\r\n* 1 red LED\r\n* 2 220 ohm resitors\r\n\r\n# Configuring arduino\r\n\r\nOpen the sketch in the Arduino IDE.  By default the software is configured to send its coordinates\r\nevery 10 seconds.  If you would like to change that interval edit line 57 and change the value for\r\nSEND_DELAY.  This value is in milliseconds.\r\n\r\nSecond, edit line 238.  The line appears as follows\r\n\r\n    sendATCommand(\"AT+SDATACONF=1,\\\"TCP\\\",\\\"0.0.0.0\\\",81\", 1000);\r\n\r\nchange \"0.0.0.0\" to the IP address of the machine that will be running the python script.  Attach your\r\nred LED and 1 resistor to pin 12 of the Arduino.  Do the same with the green LED, attaching it to pin\r\n13.\r\n\r\nNOTE: If you run into issues running on battery power, disconnect the 3.3v and 5v pins of the gps from\r\nthe stack.  Then run a jumper from pin 9 to 5v on the GPS shield\r\n\r\n# Configuring your server\r\n\r\nFirst create a file called config.py that exists in the same directory as the server script.  It should \r\nlook as followed:\r\n\r\n    hostname = 'localhost'\r\n    database = 'your database'\r\n    username = 'user'\r\n    password = 'password'\r\n\r\nThe server script requires the twisted python package to run.  Install via your prefered method.  After\r\nyou have configured your python environment import the sql script to create your database:\r\n\r\n    mysql -u username -p mydatabase < tracker.sql\r\n\r\nOnce it is configured you can run the server with the following command\r\n\r\n    python server.py\r\n\r\n# Diagnostics\r\n\r\nThis sketch provides some basic diagnostics for the tracker.  When transmitting GPS data the green LED\r\nwill light up until the connection has been terminated.  It also provides the following diagnostic codes:\r\n\r\n* 3 flashes - SIM Unavailable\r\n* 4 flashes - Could not connect to GPRS network\r\n* 5 flashes - Could not connect to cellular network\r\n* 6 flashes - Could not connect to host\r\n* 7 flashes - Unknown error\r\n\r\nNOTE: once an error is triggered the arduino will need to be reset\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}